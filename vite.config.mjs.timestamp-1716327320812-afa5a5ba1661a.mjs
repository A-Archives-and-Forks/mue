// vite.config.mjs
import { defineConfig, loadEnv } from "file:///F:/Programming/mue/node_modules/.pnpm/vite@5.2.11_@types+node@20.12.12_sass@1.77.2/node_modules/vite/dist/node/index.js";
import react from "file:///F:/Programming/mue/node_modules/.pnpm/@vitejs+plugin-react-swc@3.6.0_vite@5.2.11/node_modules/@vitejs/plugin-react-swc/index.mjs";
import path from "path";
import fs from "fs";
import ADMZip from "file:///F:/Programming/mue/node_modules/.pnpm/adm-zip@0.5.12/node_modules/adm-zip/adm-zip.js";

// package.json
var version = "7.1.0";

// vite.config.mjs
import progress from "file:///F:/Programming/mue/node_modules/.pnpm/vite-plugin-progress@0.0.7_vite@5.2.11/node_modules/vite-plugin-progress/dist/index.mjs";
var __vite_injected_original_dirname = "F:\\Programming\\mue";
var isProd = process.env.NODE_ENV === "production";
var prepareBuilds = () => ({
  name: "prepareBuilds",
  buildEnd() {
    if (isProd) {
      fs.mkdirSync(path.resolve(__vite_injected_original_dirname, "./build"), { recursive: true });
      fs.mkdirSync(path.resolve(__vite_injected_original_dirname, "./dist"), { recursive: true });
      fs.mkdirSync(path.resolve(__vite_injected_original_dirname, "./build/chrome"), { recursive: true });
      fs.copyFileSync(
        path.resolve(__vite_injected_original_dirname, "./manifest/chrome.json"),
        path.resolve(__vite_injected_original_dirname, "./build/chrome/manifest.json")
      );
      fs.copyFileSync(
        path.resolve(__vite_injected_original_dirname, "./manifest/background.js"),
        path.resolve(__vite_injected_original_dirname, "./build/chrome/background.js")
      );
      fs.cpSync(
        path.resolve(__vite_injected_original_dirname, "./manifest/_locales"),
        path.resolve(__vite_injected_original_dirname, "./build/chrome/_locales"),
        {
          recursive: true
        }
      );
      fs.cpSync(path.resolve(__vite_injected_original_dirname, "./dist"), path.resolve(__vite_injected_original_dirname, "./build/chrome/"), {
        recursive: true
      });
      fs.cpSync(
        path.resolve(__vite_injected_original_dirname, "./src/assets/icons"),
        path.resolve(__vite_injected_original_dirname, "./build/chrome/icons"),
        {
          recursive: true
        }
      );
      fs.mkdirSync(path.resolve(__vite_injected_original_dirname, "./build/chrome/src/assets"), { recursive: true });
      fs.cpSync(
        path.resolve(__vite_injected_original_dirname, "./src/assets"),
        path.resolve(__vite_injected_original_dirname, "./build/chrome/src/assets"),
        {
          recursive: true
        }
      );
      fs.mkdirSync(path.resolve(__vite_injected_original_dirname, "./build/firefox"), { recursive: true });
      fs.copyFileSync(
        path.resolve(__vite_injected_original_dirname, "./manifest/firefox.json"),
        path.resolve(__vite_injected_original_dirname, "./build/firefox/manifest.json")
      );
      fs.copyFileSync(
        path.resolve(__vite_injected_original_dirname, "./manifest/background.js"),
        path.resolve(__vite_injected_original_dirname, "./build/firefox/background.js")
      );
      fs.cpSync(path.resolve(__vite_injected_original_dirname, "./dist"), path.resolve(__vite_injected_original_dirname, "./build/firefox/"), {
        recursive: true
      });
      fs.cpSync(
        path.resolve(__vite_injected_original_dirname, "./src/assets/icons"),
        path.resolve(__vite_injected_original_dirname, "./build/firefox/icons"),
        {
          recursive: true
        }
      );
      fs.cpSync(
        path.resolve(__vite_injected_original_dirname, "./src/assets"),
        path.resolve(__vite_injected_original_dirname, "./build/firefox/src/assets"),
        {
          recursive: true
        }
      );
      const zip = new ADMZip();
      zip.addLocalFolder(path.resolve(__vite_injected_original_dirname, "./build/chrome"));
      zip.writeZip(path.resolve(__vite_injected_original_dirname, `./build/chrome-${version}.zip`));
      const zip2 = new ADMZip();
      zip2.addLocalFolder(path.resolve(__vite_injected_original_dirname, "./build/firefox"));
      zip2.writeZip(path.resolve(__vite_injected_original_dirname, `./build/firefox-${version}.zip`));
    }
  }
});
var vite_config_default = defineConfig(({ command, mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  return {
    define: {
      __APP_ENV__: JSON.stringify(env.APP_ENV)
    },
    plugins: [react(), prepareBuilds(), progress()],
    server: {
      open: true,
      hmr: {
        protocol: "ws",
        host: "localhost"
      }
    },
    build: {
      minify: isProd ? "esbuild" : false,
      sourcemap: !isProd,
      rollupOptions: {
        output: {
          manualChunks(id) {
            if (id.includes("node_modules")) {
              if (id.includes("@mui")) {
                return "vendor_mui";
              }
              return "vendor";
            }
          }
        }
      }
    },
    resolve: {
      extensions: [".js", ".jsx"],
      alias: {
        "@": path.resolve(__vite_injected_original_dirname, "./src"),
        i18n: path.resolve(__vite_injected_original_dirname, "./src/i18n"),
        components: path.resolve(__vite_injected_original_dirname, "./src/components"),
        assets: path.resolve(__vite_injected_original_dirname, "./src/assets"),
        config: path.resolve(__vite_injected_original_dirname, "./src/config"),
        features: path.resolve(__vite_injected_original_dirname, "./src/features"),
        lib: path.resolve(__vite_injected_original_dirname, "./src/lib"),
        scss: path.resolve(__vite_injected_original_dirname, "./src/scss"),
        translations: path.resolve(__vite_injected_original_dirname, "./src/i18n/locales"),
        utils: path.resolve(__vite_injected_original_dirname, "./src/utils")
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
